#!/usr/bin/env python3
#coding: utf-8
"""D3 Converter

Usage:
    convert <src> [--tiff-dst=<tiff_dirname>] [--blend-dst=<blend_dirname>] [--force] [--wb=auto|camera|<filename>] [--recursive] [--verbose|--debug] [--lockname=<name>]
    convert (-h | --help)
    convert --version

Options:
    -h --help                       Show this screen.
    --version                       Show version
    --tiff-dst=<tiff_dirname>       Set TIFF`s destination directory name (inside src directory).
    --blend-dst=<blend_dirname>     Set BLEND`s destination directory name (inside tiff directory).
    --force                         Force reconvert existing files
    --wb=auto|camera|<filename>     White Balance: auto, from camera or from ufraw-config file (*.ufraw)
    --recursive                     Recursive process all nested directories
    --verbose                       Display info level messages
    --debug                         Display debug level messages
    --lockname=<name>               Lockfile name

"""
from __future__ import unicode_literals, absolute_import

from d3_convert.processing import DirectoryRawConverter, RecursiveRAWConverter, BatchTIFFBlender
from d3_convert.log import log
from d3_convert.singleton import SingleInstance
from d3_convert.utils import path_re
from d3_convert.version import __version__
from docopt import docopt
import os


if __name__ == '__main__':
    arguments = docopt(__doc__, version='D3 Converter v' + __version__)

    src = arguments.pop('<src>', None)
    if src is not None and src and src != '/':
        src = os.path.realpath(src)

        tiff_dst = arguments.pop('--tiff-dst')
        if tiff_dst is None:
            tiff_dst = 'tiff'
        blend_dst = arguments.pop('--blend-dst')
        if blend_dst is None:
            blend_dst = 'blend'

        wb_mode = arguments.pop('--wb')
        if wb_mode is None:
            wb_mode = 'camera'
        wb_source = None
        # TODO: довести до ума WB из конкретного файла
        if False and wb_mode not in ['camera', 'auto']:
            if not os.path.isfile(wb_mode):
                raise Exception('Unknown WhiteBalance soure: {0}'.format(wb_mode))
            else:
                wb_source = wb_mode
                wb = 'manual'

        force = arguments.pop('--force', False)
        recursive = arguments.pop('--recursive', False)

        verbose = arguments.pop('--verbose', False)
        debug = arguments.pop('--debug', False)
        if verbose:
            log.level = log.INFO
        elif debug:
            log.level = log.DEBUG

        lockname = arguments.pop('--lockname', '')
        if lockname is None:
            lockname = path_re.sub('', src).lower()

        instance = SingleInstance(flavor_id=lockname)

        converter_class = RecursiveRAWConverter if recursive else DirectoryRawConverter

        converter = converter_class(dst_dirname=tiff_dst, wb_mode=wb_mode, wb_source=wb_source)
        blender = BatchTIFFBlender()
        for tiffs in converter.process(src=src, force=force):
            if tiffs:
                blender.process(tiffs, os.path.join(tiffs[0].dirname, blend_dst), force=force)
