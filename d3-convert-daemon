#!/usr/bin/env python3
#coding: utf-8
"""D3 Convert Daemon

Usage:
    d3-convert-daemon --src=<srcdir> [--tiff-dst=<dst_dirname>] [--blend-dst=<dst_dirname>] [--force] [--timeout=<n>] [--uid=<id>] [--gid=<id>] [--pidfile=<path>] [--verbose|--debug] [--logfile=<path>]
    d3-convert-daemon (-h | --help)
    d3-convert-daemon --version

Options:
    --tiff-dst=<dstdir>         Set TIFF`s destination directory name (inside src directory).
    --blend-dst=<dstdir>        Set BLEND`s destination directory name (inside tiff directory).
    --force                     Force reconvert existing files
    -h --help                   Show this screen.
    --version                   Show version

"""

from __future__ import unicode_literals, absolute_import
from d3_convert.processing import RecursiveRAWConverter, BatchTIFFBlender
from d3_convert.log import log
from d3_convert.utils import path_re
from d3_convert.version import __version__
import daemon
from daemon.pidlockfile import PIDLockFile
from docopt import docopt
import io
import os
import time
import traceback


def main(src, tiff_dst, blend_dst, timeout, force):
    timeout = 60 * timeout
    while True:
        #TODO: корректно перехватывать исключения
        try:
            converter = RecursiveRAWConverter(dst_dirname=tiff_dst, wb_mode='camera')
            blender = BatchTIFFBlender()
            for tiffs in converter.process(src, force=force):
                if tiffs:
                    blender.process(tiffs, os.path.join(tiffs[0].dirname, blend_dst), force=force)

        except Exception as e:
            log.error(e)
            traceback.print_exc(limit=10)

        time.sleep(timeout)

if __name__ == '__main__':
    arguments = docopt(__doc__, version='D3 Convert Daemon v' + __version__)

    src = arguments.pop('--src', None)
    if src is not None:
        src = os.path.realpath(src)
        daemon_name = path_re.sub('', src).lower()

        tiff_dst = arguments.pop('--tiff-dst')
        if tiff_dst is None:
            tiff_dst = 'tiff'
        blend_dst = arguments.pop('--blend-dst')
        if blend_dst is None:
            blend_dst = 'blend'

        try:
            timeout = int(arguments.pop('--timeout'))
        except (TypeError, ValueError):
            timeout = 1
        else:
            if timeout < 1:
                timeout = 1

        force = arguments.pop('--force', False)
        pidfile = arguments.pop('--pidfile')
        if not pidfile:
            pidfile = os.path.join('/run/d3-convert-daemon-{0}.pid'.format(daemon_name))

        pidfile = PIDLockFile(pidfile)

        try:
            uid = int(arguments.pop('--uid'))
        except (TypeError, ValueError):
            uid = None

        try:
            gid = int(arguments.pop('--gid'))
        except (TypeError, ValueError):
            gid = None

        verbose = arguments.pop('--verbose', False)
        debug = arguments.pop('--debug', False)
        if verbose:
            log.level = log.INFO
        elif debug:
            log.level = log.DEBUG

        logfile = arguments.pop('--logfile')
        if logfile is None:
            logfile = '/var/log/d3/daemon-{0}.log'.format(daemon_name)
        logfile = io.open(logfile, 'a')


        context = daemon.DaemonContext(umask=0o002,
                                       uid=uid,
                                       gid=gid,
                                       pidfile=pidfile,
                                       working_directory=src,
                                       #chroot_directory=src,
                                       stdout=logfile,
                                       stderr=logfile,
                                       )
        with context:
            main(src, tiff_dst, blend_dst, timeout, force)
